predict sets: {
    "ActualParameters": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "ActualParameters'": {
        RParen,
        Comma,
    },
    "BreakStatement": {
        Keyword(
            Break,
        ),
    },
    "CompoundStatement": {
        LCurly,
    },
    "CompoundStatement'": {
        Keyword(
            Int,
        ),
        Keyword(
            Read,
        ),
        Keyword(
            Char,
        ),
        Keyword(
            While,
        ),
        Keyword(
            Return,
        ),
        Keyword(
            Break,
        ),
        Keyword(
            If,
        ),
        Keyword(
            Newline,
        ),
        Keyword(
            Write,
        ),
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        LCurly,
        RCurly,
        Semicolon,
        Not,
    },
    "CompoundStatement''": {
        Keyword(
            Read,
        ),
        Keyword(
            While,
        ),
        Keyword(
            Return,
        ),
        Keyword(
            Break,
        ),
        Keyword(
            If,
        ),
        Keyword(
            Newline,
        ),
        Keyword(
            Write,
        ),
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        LCurly,
        RCurly,
        Semicolon,
        Not,
    },
    "Definition": {
        Keyword(
            Int,
        ),
        Keyword(
            Char,
        ),
    },
    "Definition'": {
        LParen,
        Semicolon,
    },
    "Expression": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "Expression'": {
        AssignOp,
        RParen,
        Comma,
        Semicolon,
    },
    "ExpressionStatement": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "FormalParamList": {
        Keyword(
            Int,
        ),
        Keyword(
            Char,
        ),
    },
    "FormalParamList'": {
        RParen,
        Comma,
    },
    "FunctionBody": {
        LCurly,
    },
    "FunctionCall": {
        LParen,
    },
    "FunctionCall'": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        RParen,
        Not,
    },
    "FunctionDefinition": {
        LParen,
    },
    "FunctionHeader": {
        LParen,
    },
    "FunctionHeader'": {
        Keyword(
            Int,
        ),
        Keyword(
            Char,
        ),
        RParen,
    },
    "IfStatement": {
        Keyword(
            If,
        ),
    },
    "IfStatement'": {
        Keyword(
            Read,
        ),
        Keyword(
            While,
        ),
        Keyword(
            Return,
        ),
        Keyword(
            Break,
        ),
        Keyword(
            If,
        ),
        Keyword(
            Newline,
        ),
        Keyword(
            Else,
        ),
        Keyword(
            Write,
        ),
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        LCurly,
        RCurly,
        Semicolon,
        Not,
    },
    "NewLineStatement": {
        Keyword(
            Newline,
        ),
    },
    "NullStatement": {
        Semicolon,
    },
    "Primary": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "Primary'": {
        RelOp,
        AddOp,
        MulOp,
        AssignOp,
        LParen,
        RParen,
        Comma,
        Semicolon,
    },
    "ReadStatement": {
        Keyword(
            Read,
        ),
    },
    "ReadStatement'": {
        RParen,
        Comma,
    },
    "RelopExpression": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "RelopExpression'": {
        RelOp,
        AssignOp,
        RParen,
        Comma,
        Semicolon,
    },
    "ReturnStatement": {
        Keyword(
            Return,
        ),
    },
    "ReturnStatement'": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Semicolon,
        Not,
    },
    "SimpleExpression": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "SimpleExpression'": {
        RelOp,
        AddOp,
        AssignOp,
        RParen,
        Comma,
        Semicolon,
    },
    "Statement": {
        Keyword(
            Read,
        ),
        Keyword(
            While,
        ),
        Keyword(
            Return,
        ),
        Keyword(
            Break,
        ),
        Keyword(
            If,
        ),
        Keyword(
            Newline,
        ),
        Keyword(
            Write,
        ),
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        LCurly,
        Semicolon,
        Not,
    },
    "Term": {
        Identifier,
        Number,
        CharLiteral,
        StringLiteral,
        AddOp,
        LParen,
        Not,
    },
    "Term'": {
        RelOp,
        AddOp,
        MulOp,
        AssignOp,
        RParen,
        Comma,
        Semicolon,
    },
    "ToyCProgram": {
        Keyword(
            Int,
        ),
        Keyword(
            Char,
        ),
        Eof,
    },
    "ToyCProgram'": {
        Keyword(
            Int,
        ),
        Keyword(
            Char,
        ),
        Eof,
    },
    "Type": {
        Keyword(
            Int,
        ),
        Keyword(
            Char,
        ),
    },
    "WhileStatement": {
        Keyword(
            While,
        ),
    },
    "WriteStatement": {
        Keyword(
            Write,
        ),
    },
}